# ===========================================
# Developer Bash Config â€” Martin Stadler
# For Kubernetes, Containers, and DevOps
# ===========================================

# --- Load only once ---
[[ "$BASHRC_DEVELOPER_LOADED" == "1" ]] && return
export BASHRC_DEVELOPER_LOADED=1

# ==================================================
# Environment Variables
# ==================================================
export EDITOR=vi
export VISUAL=vi
export PAGER=less
export LESS="-R"

# ==================================================
# GitHub CLI shortcuts
# ==================================================
alias ghc='gh repo clone'
alias ghr='gh repo view --web'
alias ghp='gh pr view --web'

# ==================================================
# Docker Compose Shortcuts (additional)
# ==================================================
alias dcupdate='docker compose pull && docker compose up -d --remove-orphans'
alias dctail='docker compose logs -f --tail=100'

# ==================================================
# Package Management (additional)
# ==================================================
alias dpi='sudo dpkg -i'
alias opi='opkg install'
alias ops='opkg list-installed | grep'

# ==================================================
# Kubernetes Extras
# ==================================================
# Use kubecolor if available
if command -v kubecolor >/dev/null 2>&1; then
  alias kubectl='kubecolor'
fi

# --- k0rdent-specific ---
alias kdlogin='k0rdent auth login'
alias kdlist='k0rdent cluster list'
alias kdinfo='k0rdent cluster info'
alias kdapply='k0rdent apply -f'

# ==================================================
# Useful Functions
# ==================================================

# Quick GitHub clone + enter directory
gh_clone() {
  if [ -z "$1" ]; then
    echo "Usage: gh_clone <owner/repo>"
    return 1
  fi
  gh repo clone "$1"
  cd "$(basename "$1")" || return
}

# Quick repo creation
gh_create_repo() {
  if [ -z "$1" ]; then
    echo "Usage: gh_create_repo <repo-name>"
    return 1
  fi
  gh repo create "$1" --private --source=. --push
}

# Docker cleanup with confirmation
dcleanall() {
  echo "ðŸ§¹ Cleaning all Docker resources..."
  docker stop $(docker ps -aq) 2>/dev/null || true
  docker system prune -af --volumes
}

# Kubernetes context summary
kctxs() {
  echo "Current context:"
  kubectl config current-context
  echo
  echo "Available contexts:"
  kubectl config get-contexts
}

# Kubernetes namespace quick switch
kn() {
  if [ -z "$1" ]; then
    kubectl config view --minify --output 'jsonpath={..namespace}'
    echo
  else
    kubectl config set-context --current --namespace="$1"
  fi
}

# Quick pod logs for a deployment
klog() {
  if [ -z "$1" ]; then
    echo "Usage: klog <pod-name-prefix> [namespace]"
    return 1
  fi
  local ns="${2:---all-namespaces}"
  kubectl logs -f $(kubectl get pods $ns | grep "$1" | head -1 | awk '{print $1}') $ns
}

# ==================================================
# Custom Prompt (optional - override default)
# ==================================================
if [[ $PS1 && -z "${INSIDE_EMACS}" ]]; then
  PS1='\[\033[1;32m\]\u@\h\[\033[0m\]:\[\033[1;34m\]\w\[\033[0m\]$ '
fi

# --- Message ---
echo "ðŸ§© Developer shell loaded"
